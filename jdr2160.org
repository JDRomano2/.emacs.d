#+TITLE: Joe Romano's Emacs Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp

* Contents of ~init.el~

If Emacs were a truly [[http://www.literateprogramming.com/knuthweb.pdf][literate]] programming environment, we'd be able
to keep all of our configuration in a single file. Unfortunately, it's
not, so we go with the next best thing: Keeping most of our config in
an ~org-mode~ file (i.e., this file) and using ~org-babel-load-file~
to convert all of the emacs-lisp code blocks to a file that will be
used in our config. ~init.el~ just contains the bare minimum
configuration needed to instruct ~org-mode~ how to do this
correctly. Since we rely on some external packages in the process, as
well as a bleeding-edge version of ~org-mode~ (newer than what's in
the main package repository), there is a little bit of package
management here, as well.

First, we load ~package.el~ (Emacs' built-in package manager, included
in all versions >= 24) and add third-party package repositories as needed.

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa"
				     . "https://melpa.org/packages/")
		 t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org"
				     . "https://orgmode.org/elpa/")
		 t))
#+END_SRC

Now, we tell Emacs to load all of the packages we've already installed.

#+BEGIN_SRC emacs-lisp :tangle no
  (package-initialize)
#+END_SRC

One of the most important tools we use in our configuration is
jwiegley's ~use-package~ package, which gives a super-concise syntax
for:
- Installing packages, if needed
- Loading packages
- Running config lines relevant to the package both at Emacs startup
  and when the package is 'activated' for the first time
- Setting up keybindings associated with packages and activating them
  when the package is in use
- Diminishing any resulting major or minor modes so they don't clutter
  up the mode line
- A few other things (check out [[https://github.com/jwiegley/use-package][the README]] for more info)
The following code block checks to see if we have ~'use-package~
installed, and installs it if we do not. We also need to require
~'diminish~ and ~'bind-key~ to provide support for the corresponding
features in ~use-package~.

#+BEGIN_SRC emacs-lisp :tangle no
  (unless (or (package-installed-p 'use-package)
	      (package-installed-p 'diminish))
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'diminish))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

Finally, we instruct ~org-mode~ to copy all ~emacs-lisp~ code blocks
in this file to a different file (named ~jdr2160.org~) and then load
that file's contents.

#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-load-file (concat user-emacs-directory "jdr2160.org"))
#+END_SRC

We're now ready to be literate!

* Installing and pre-configuring Emacs

TODO: Describe the preferred installation methods for Emacs on various
systems.

* Personal Information

I don't think I've run into a situation where I actually need to use
these variables, but I feel like it's good form.

PLEASE change these variables if you are going to reuse this config
file!!!

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Joseph D. Romano"
	user-mail-address "jdromano2@gmail.com")
#+END_SRC

* Global modes and general editor tweaks

These largely fall into the 'sane defaults' category of configuration
tweaks:

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (global-visual-line-mode)
  (diminish 'visual-line-mode)

  (global-display-line-numbers-mode)
  (diminish 'display-line-numbers-mode)

  (show-paren-mode t)
#+END_SRC

If on Windows, we want to remap the menu key ~<apps>~ to be the same
as Linux's menu key ~<menu>~.

#+begin_src emacs-lisp
  (when (string-equal system-type "windows-nt")
    (global-set-key (kbd "<apps>") 'execute-extended-command))
#+end_src

~smartparens~ and ~paredit~ make working with parentheses more
convenient and visually appealing.

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)
  (use-package smartparens
    :ensure t
    :init
    (smartparens-global-mode 1)
    (show-smartparens-global-mode +1)
    :bind (("M-n" . sp-next-sexp)
	   ("M-p" . sp-previous-sexp)
	   ("M-f" . sp-forward-sexp)
	   ("M-b" . sp-backward-sexp))
    :config
    (use-package smartparens-config)
    (setq smartparens-strict-mode t
	  sp-autoinsert-if-followed-by-word t
	  sp-autoskip-closing-pair 'always
	  sp-base-key-bindings 'paredit
	  sp-hybrid-kill-entire-symbol nil)
    (sp-use-paredit-bindings)
    (sp-with-modes '(markdown-mode gfm-mode rst-mode)
		   (sp-local-pair "*" "*" :bind "C-*")
		   (sp-local-tag "2" "**" "**")
		   (sp-local-tag "s" "```scheme" "```")
		   (sp-local-tag "<" "<_>" "</_>" :transform 'sp-match-sgml-tags))
    (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p)))
#+END_SRC

* Configure backups

Emacs is pretty good about backing up files, in case something
catastrophic happens. However, you end up with backup files scattered
all over the filesystem. Instead, we'll create a ~backups~ directory
to hold onto all of the backup files.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* Set up fonts

For now, we just use whatever font is set by the terminal application
or OS.

* Theme
* Navigation and movement
** File structure navigation and buffer management

Beyond Emacs' default tools for browsing your file system, there are a
handful of relatively popular 3rd-party packages designed to make
navigating through your directories and files easier. My favorite one
is Helm. This basic configuration makes sure Helm is installed and
active, and it remaps some of the default keystrokes to use Helm
instead.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind (("C-c h" . helm-command-prefix)
	   ("C-x b" . helm-mini)
	   ("C-`" . helm-resume)
	   ("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)
	   ("C-x C-r" . helm-recentf))
    :init
    (require 'helm-config)
    :config
    (setq helm-locate-command "mdfind -interpret -name %s $s"
	  helm-ff-newfile-prompt-p nil
	  helm-M-x-fuzzy-match t)
    (helm-mode))
  (use-package helm-projectile
    :ensure t
    :after helm-mode
    :commands helm-projectile
    :bind("C-c p h" . helm-projectile))
  (use-package helm-ag
    :ensure t
    :after helm-mode)
  (use-package helm-swoop
    :ensure t
    :after helm-mode
    :bind ("H-w" . helm-swoop))
#+END_SRC

** Multiple cursors

Multiple cursors were a feature made popular by Sublime Text. The
Emacs package ~multiple-cursors~ brings a lot of this functionality to
our favorite programming environment.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

** Incremental search

Incremental search doesn't natively work with ~multiple-cursors~. We
can use ~phi-search~ to fix this.

#+BEGIN_SRC emacs-lisp
  (use-package phi-search
    :ensure t
    :config
    (global-set-key (kbd "C-s") 'phi-search)
    (global-set-key (kbd "C-r") 'phi-search-backward))
#+END_SRC

* Language-specific configuration
** TeX (and variants thereof)

I do most of my technical writing in $\LaTeX$ when possible. ~auctex~
is the Emacs package that provides most of the convenience
functionality we need for working in TeX.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :init
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(prettify-symbols-mode)
		(LaTeX-math-mode)
		(turn-on-reftex)
		(reftex-isearch-minor-mode)
		(turn-off-auto-fill)))
    (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    :config
    (setq TeX-save-query nil)
    (setq TeX-auto-save t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)
    (setq TeX-electric-escape t)
    (setq global-font-lock-mode t)
    (font-lock-add-keywords 'latex-mode
			    (list(list "\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)"
				       '(1 'font-latex-string-face t)
				       '(2 'font-latex-string-face t)
				       '(3 'font-latex-string-face t))))
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    (setq TeX-source-correlate-mode t)
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
	      'TeX-revert-document-buffer)
    ;; use sumatra to view pdf
    ;; http://stackoverflow.com/questions/14448606/sync-emacs-auctex-with-sumatra-pdf
    ;; -set-color-range #fdf4c1 #282828
    ;;TODO
    )
#+END_SRC

~magic-latex-buffer~ adds nice visual effects to Emacs .tex buffers,
like typeset math symbols and inline image previews.

#+BEGIN_SRC emacs-lisp
  (use-package magic-latex-buffer
    :ensure t
    :defer t
    :config
    (add-hook 'latex-mode-hook 'magic-latex-buffer))
#+END_SRC

Depending on the computing environment, ~pdf-tools~ can provide some
support for viewing compiled PDFs right within a separate Emacs
buffer. Getting it installed requires a bit of extra work outside of
Emacs... actually setting this up is on my to-do list for now!

** Org-mode

Org mode is mostly ready-to-go out of the box, but it is missing a few
handy features that either need to be enabled or programmed manually
in e-lisp.

+One of my most common actions is to create a source code
block. Surprisingly, there isn't built-in functionality to insert a
new source block. This function asks the user for a language, creates
a new source code block for that language, and drops the user into a
new buffer via ~org-edit-src-code~:+ Apparently, ~org-mode~ DOES offer
this functionality, via
[[https://orgmode.org/manual/Structure-Templates.html][structure
templates]], but I'm going to keep this function around just because
it was the first elisp function I wrote by hand ;).

#+BEGIN_SRC emacs-lisp
  (defun jdr/org-insert-new-source-block ()
    "Create a new source code block in a specified language."
    (interactive)
    (insert (concat
	     "#+BEGIN_SRC "
	     (read-string "Language of the new source block: ")
	     "\n\n"
	     "#+END_SRC"))
    (forward-line -1)
    (org-edit-special))
#+END_SRC

I like to use ~auto-fill-mode~ any time I'm working in an org
document.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :ensure org-plus-contrib
    :pin org
    :bind (("C-c r" . org-capture)
	   ("C-c a" . org-agenda)
	   ("C-c l" . org-store-link)
	   ("C-c L" . org-insert-link-global)
	   ("C-c O" . org-open-at-point-global)
	   ("<f9> <f9>" . org-agenda-list)
	   ("<f9> <f8>" . (lambda () (interactive) (org-capture nil "r")))
	   :map org-mode-map
	   ("C-M-w" . append-next-kill)
	   ("C-TAB" . org-cycle)
	   ("C-c v" . org-show-todo-tree)
	   ("C-c C-r" . org-refile)
	   ("C-c R" . org-reveal)
	   ("C-c k" . org-cut-subtree)
	   ("C-c b" . myu/org-back-to-heading)
	   ("C-c p" . org-display-outline-path))
    :init
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-adapt-indentation nil)
    :config
    (setq org-use-speed-commands t)
    (setq org-yank-adjusted-subtrees t))
#+END_SRC

The rest of my ~org-mode~ configuration draws heavily on Sacha Chua's
Emacs configuration (which you can find [[https://pages.sachachua.com/.emacs.d/Sacha.html][here]]).

*** Org Modules

#+BEGIN_SRC emacs-lisp
  (setq org-modules '(org-bbdb
		      org-gnus
		      org-info
		      org-man
		      org-eval
		      org-toc
		      org-screen
		      org-panel))
  (eval-after-load 'org
    '(org-load-modules-maybe t))
#+END_SRC

*** ~org-agenda~

~org-agenda~ is technically a separate package, and needs to be
configured as such. Notice that since it isn't installed separately,
we need to set ~:ensure nil~.

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :bind (:map org-agenda-mode-map
		("i" . org-agenda-clock-in)
		("Y" . org-agenda-todo-yesterday))
    :init
    (setq org-agenda-span 2)
    (setq org-agenda-tags-column -100)
    (setq org-agenda-sticky nil)
    (setq org-agenda-inhibit-startup t)
    (setq org-agenda-use-tag-inheritance t)
    (setq org-agenda-show-log t)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (setq org-agenda-time-grid
	  '((daily today require-timed)
	    (800 1000 1200 1400 1600 1800 2000)
	    "......" "----------------"))
    (setq org-columns-show-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
    )
#+end_src

*** Speed keys

Org speed keys are quick, single character keystrokes that can be
performed when your point is at the beginning of an Org header
line. We turn this feature on, add some new speed keys, and remap some
of the defaults.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
    (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
    (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule)) ;; originally `narrow to subtree'
    (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree)))
#+end_src

*** Org-mode navigation tweaks

This function is copied from Sacha Chua's config. It just makes
~(org-back-to-heading)~ interactive. I already bound it to a key in
the ~use-package~ block for Org (above).

#+begin_src emacs-lisp
  (defun my/org-back-to-heading ()
    (interactive)
    (org-back-to-heading))
#+end_src

*** Sync ~org-mode~ files

I keep my org files in Dropbox, which has a different location on my
Macbook vs. on my Windows 10 desktop. You should modify these
locations as needed to fit your setup.

#+begin_src emacs-lisp
  (cond
   ((string-equal system-type "windows-nt")
    (progn
      (setq org-directory "D:/Dropbox/org")
      (setq org-default-notes-file "D:/Dropbox/org/notes.org")))
   ((string-equal system-type "darwin")
    (progn
      (setq org-directory "~/Dropbox/org")
      (setq org-default-notes-file "~/Dropbox/org/notes.org"))))
#+end_src

*** Other miscellaneous Org config

These don't really fit elsewhere, so I'm just putting them here in no
particular order.

This command (adapted from Sacha Chua) adds a heading at the same
level scheduled for whatever date is tomorrow:

#+begin_src emacs-lisp
  (defun my/org-insert-heading-for-tomorrow ()
    "Insert a same-level heading for tomorrow."
    (interactive)
    (let ((new-date
	   (seconds-to-time
	    (+ 86400.0
	       (float-time
		(org-read-date nil 'to-time (elt (org-heading-components) 4)))))))
      (org-insert-heading-after-current)
      (insert (format-time-string "%Y-%m-%d\n\n" new-date))))
#+end_src

* Project management
* License

#+NAME: License
#+BEGIN_EXAMPLE
Copyright 2021 by Joseph D. Romano

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
#+END_EXAMPLE
